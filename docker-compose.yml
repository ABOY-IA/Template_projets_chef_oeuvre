services:
  # --- Base de données principale (Postgres custom) ---
  db:
    build:
      context: ./postgres-custom
    container_name: postgres_custom
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "${DB_PORT}:5432"
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d postgres"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 60s
    networks:
      - template_network

  # --- Backend principal (API FastAPI) ---
  api:
    build:
      context: .
      dockerfile: api/Dockerfile
    container_name: fastapi_app
    command: uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - .:/app
      - ./api/logs:/app/api/logs
    ports:
      - "${API_PORT}:8000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 20s
    networks:
      - template_network

  # --- Orchestration Prefect ---
  prefect-server:
    image: prefecthq/prefect:2-python3.12
    container_name: prefect-server
    command: prefect server start --host 0.0.0.0
    env_file:
      - .env
    ports:
      - "${PREFECT_SERVER_PORT}:4200"
    volumes:
      - prefect_data:/root/.prefect
      - .:/app
    restart: unless-stopped
    depends_on:
      - db
    environment:
      PREFECT_API_DATABASE_CONNECTION_URL: ${PREFECT_API_DATABASE_CONNECTION_URL}
    healthcheck:
      test:
        - CMD-SHELL
        - >
          bash -c "exec 3<>/dev/tcp/127.0.0.1/4200; echo -e 'GET / HTTP/1.1\r\nhost: localhost\r\nConnection: close\r\n\r\n' >&3; grep 'HTTP/1.1 200 OK' <&3"
      interval: 5s
      timeout: 10s
      retries: 20
    networks:
      - template_network

  prefect-worker:
    image: prefecthq/prefect:2-python3.12
    container_name: prefect-worker
    env_file:
      - .env
    environment:
      EXTRA_PIP_PACKAGES: "-r /app/requirements.txt"
      PYTHONPATH: /app
    command: prefect worker start --pool "${PREFECT_WORK_POOL}"
    depends_on:
      prefect-server:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - .:/app
    networks:
      - template_network

  # --- MLflow tracking server ---
  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.12.1
    container_name: mlflow
    env_file:
      - .env
    ports:
      - "${MLFLOW_PORT}:5000"
    environment:
      MLFLOW_ARTIFACT_ROOT: ${MLFLOW_ARTIFACT_ROOT}
      MLFLOW_BACKEND_STORE_URI: ${MLFLOW_BACKEND_STORE_URI}
    volumes:
      - ./monitoring/mlruns:${MLFLOW_ARTIFACT_ROOT}
      - ./monitoring/mlflow_data:/mlflow_data
    restart: unless-stopped
    command: mlflow server --host 0.0.0.0 --port 5000
    networks:
      - template_network

  # --- Monitoring Prometheus ---
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT}:9090"
    volumes:
      - ./monitoring/prometheus_data/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - template_network

  # --- Monitoring Grafana ---
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    ports:
      - "${GRAFANA_PORT}:3000"
    volumes:
      - ./monitoring/grafana_data:/var/lib/grafana
    networks:
      - template_network

  # --- Uptime Kuma (monitoring de disponibilité) ---
  uptime-kuma:
    image: louislam/uptime-kuma:latest
    container_name: uptime_kuma
    ports:
      - "${UPTIME_KUMA_PORT}:3001"
    volumes:
      - ./monitoring/uptime-kuma-data:/app/data
    restart: unless-stopped
    networks:
      - template_network

  # --- Frontend (Streamlit ou autre) ---
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    command: streamlit run frontend/app.py --server.enableCORS true
    volumes:
      - .:/app
      - ./frontend/logs:/app/frontend/logs
    ports:
      - "${FRONTEND_PORT}:8501"
    depends_on:
      - api
    env_file:
      - .env
    networks:
      - template_network

# --- Déclaration des volumes persistants ---
volumes:
  postgres_data:
  prefect_data:
  prefect-postgres-data:
  grafana_data:
  uptime-kuma-data:

# --- Déclaration des réseaux ---
networks:
  template_network:
    driver: bridge
