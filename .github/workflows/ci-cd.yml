name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  # Variables globales pour les chemins
  API_PATH: ./api
  FRONTEND_PATH: ./frontend

jobs:
  lint-and-check:
    name: Lint & Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Ruff lint API code
        run: |
          ruff check $API_PATH --output-format github
          ruff format $API_PATH --check --output-format github

      - name: Ruff lint Frontend code
        run: |
          ruff check $FRONTEND_PATH --output-format github
          ruff format $FRONTEND_PATH --check --output-format github

      - name: Ruff lint tests
        run: |
          ruff check ./tests --output-format github
          ruff format ./tests --check --output-format github

      - name: Check for type errors with mypy
        run: |
          mypy $API_PATH $FRONTEND_PATH ./tests

      - name: Check for import sorting with Ruff
        run: |
          ruff check --select I . --output-format github

      - name: Check for unused imports and variables
        run: |
          ruff check --select F401,F841 . --output-format github

  security:
    name: Security & Dependency Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Check for vulnerabilities
        uses: pypa/gh-action-pip-audit@v1.1.0
        with:
          inputs: requirements.txt

      - name: Check for secrets in code
        uses: trufflesecurity/trufflehog@v3.88.3

  build-and-test:
    name: Build & Test (Docker Compose)
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:16
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: xtremdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U user" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Copy .env.example to .env
        run: cp .env.example .env

      - name: Build API Docker image
        run: docker build -t api-test $API_PATH

      - name: Build Frontend Docker image
        run: docker build -t frontend-test $FRONTEND_PATH

      - name: Start services with Docker Compose
        run: |
          docker compose -f docker-compose.yml up -d db

      - name: Wait for Postgres to be ready
        run: |
          for i in {1..20}; do
            docker exec postgres_custom pg_isready -U admin -d mypostgresdb && exit 0 || sleep 2
          done
          exit 1
          
      - name: Start API and Frontend
        run: docker compose -f docker-compose.yml up -d api frontend

      - name: Wait for API to be healthy
        run: |
          for i in {1..20}; do
            curl --fail http://localhost:8000/health && exit 0 || sleep 5
          done
          exit 1

      - name: Run API tests
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pytest ./tests --maxfail=2 --disable-warnings -v

      - name: Stop and clean up Docker Compose
        if: always()
        run: docker compose -f docker-compose.yml down -v

  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [lint-and-check, security, build-and-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push API image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/xtrem-api:latest $API_PATH
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/xtrem-api:latest

      - name: Build and push Frontend image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/xtrem-frontend:latest $FRONTEND_PATH
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/xtrem-frontend:latest

  deploy:
    name: Deploy to Production (example)
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy (placeholder)
        run: echo "Déploiement automatique à personnaliser selon votre infra (SSH, kubectl, etc.)"
